EASR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (IFE): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (head): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): ModuleList(
    (0): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (1): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (2): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (3): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (4): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (5): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (6): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (7): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
  )
  (GFF): ModuleList(
    (0): GFF_unit(
      (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (1): GFF_unit(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (2): GFF_unit(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (3): GFF_unit(
      (conv): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (4): GFF_unit(
      (conv): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (5): GFF_unit(
      (conv): Conv2d(448, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (6): GFF_unit(
      (conv): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (7): GFF_unit(
      (conv): Conv2d(576, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (conv): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)EASR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (IFE): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (head): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): ModuleList(
    (0): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (1): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (2): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (3): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (4): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (5): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (6): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (7): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
  )
  (GFF): ModuleList(
    (0): GFF_unit(
      (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (1): GFF_unit(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (2): GFF_unit(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (3): GFF_unit(
      (conv): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (4): GFF_unit(
      (conv): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (5): GFF_unit(
      (conv): Conv2d(448, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (6): GFF_unit(
      (conv): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (7): GFF_unit(
      (conv): Conv2d(576, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (conv): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
EASR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (IFE): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (head): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): ModuleList(
    (0): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (1): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (2): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (3): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (4): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (5): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (6): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (7): RIRGroup(
      (body): ModuleList(
        (0): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(2, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (5): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(5, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(6, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (7): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(7, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (8): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(9, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (10): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(10, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (11): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(11, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (12): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(12, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (13): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(13, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (14): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(14, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (15): EARB(
          (CA): CCA(
            (squeeze): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
            (squeeze_fn): Softmax(dim=-1)
            (excitation): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (SA): PSA(
            (SA): ESA(
              (ESA): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=4)
                (3): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1))
                (4): Sigmoid()
              )
            )
            (SA_squeeze): SA_squeeze(
              (conv): Sequential(
                (0): Conv2d(15, 1, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
              )
            )
          )
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
  )
  (GFF): ModuleList(
    (0): GFF_unit(
      (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (1): GFF_unit(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (2): GFF_unit(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (3): GFF_unit(
      (conv): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (4): GFF_unit(
      (conv): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (5): GFF_unit(
      (conv): Conv2d(448, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (6): GFF_unit(
      (conv): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (7): GFF_unit(
      (conv): Conv2d(576, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (conv): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
